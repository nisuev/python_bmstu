# Нисуев Нису ИУ7 - 12Б
# Программа для заданных значений строит таблицу данных функции
# и строит график одной из выбранных функций
# W = 2048 * t ** 12 - 6144 * t ** 10 + 6912 * t ** 8 - 3584 * t ** 6 + 840 * t ** 4 - 72 * t ** 2 + 1
# -0.5 0.05 0.5
begin = float(input('Введите начальное значение аргумента: '))
end = float(input('Введите конечное значение аргумента: '))
step = float(input('Введите шаг аргумента: '))
eps = 0.000000001

if begin == end:
    print('Начальнео значение не может быть равное конечному')
    begin = float(input('Введите корректное начальное значение аргумента: '))
    end = float(input('Введите корректное конечное значение аргумента: '))

# Проверка на правильность ввода
while True:  # проверка правильности ввода шага
    if step <= 0:
        print('Неккоректное значение шага. Шаг должен быть больше 0')
        step = float(input('Введите шаг аргумента: '))
        continue
    elif abs(end - begin) - step < eps:
        print('Неккоректное значение шага.')
        step = float(input('Введите шаг аргумента: '))
        continue
    else:
        break

# упорядочивание значений аргумента
if begin > end:
    begin, end = end, begin

# Вывод начала таблички
print('-' * 29)
print('|{:^13s}|{:^13s}|'.format('t', 'W'))
print('-' * 29)

W_max, W_min = float('-inf'), float('inf')  # макс и мин значения функции
n = int(abs((end - begin) // step) + 1)  # кол-во значения аргумента

# Вывод таблички
for i in range(n):
    t = begin + i * step  # Рассчет аргумента с учетом шага
    W = 2048 * t ** 12 - 6144 * t ** 10 + 6912 * t ** 8 - 3584 * t ** 6 + 840 * t ** 4 - 72 * t ** 2 + 1  # Расчет значения функции
    
    # Нахождение макс значения функции
    if W_max < W:
        W_max = W
    # Нахождение мин значения функции
    if W_min > W:
        W_min = W
        t_min = t  # Значения аргумента для W_min
    print('|', '{:11.5g}'.format(t), '|', '{:11.5g}'.format(W), '|')

else:
    print('-' * 29)  # Закрытие таблички

zas = int(input('Введите колличество засечек от 4 до 8: '))

# Проверка на ввод колличества засечек
while not(4 <= zas <= 8):
    print('Колличество засечек может быть от 4 до 8')
    zas = int(input('Введите правильное колличество засечек: '))

print(' ' * 10, end='')  # Вывод начала первой строки графика
W_step = (W_max - W_min) / (zas - 1)  # Расчет шага для оси значений
r = (W_max - W_min) / 80  # Расчет величины знакоместа
W_print = W_min  # Выводимое на линейке значение функции

# Вывод оси значений функции
for i in range(zas):
    print(f'{W_print:<{80 // (zas - 1)}.{5}g}', end='')
    W_print += W_step
print()

# Построчный вывод графика
for i in range(n):
    t = begin + i * step
    print(f'{t:<{9}.{5}g}|', end='')
    W = 2048 * t ** 12 - 6144 * t ** 10 + 6912 * t ** 8 - 3584 * t ** 6 + 840 * t ** 4 - 72 * t ** 2 + 1
    # Проверка нахождения значения функции в данном знакоместе
    for j in range(81):
        if W_min + r * j <= W < W_min + r * (j + 1):
            print('*', end='')
        # Если в данном знакоместе лежит ноль
        elif W_min + r * j <= 0 < W_min + r * (j + 1):
            print('|', end='')
        else:
            print(end=' ')
    print()
print()

print(f'Минимальное значение функции {W_min:.{5}g} достигается при t = {t_min:.{5}g}')  # Доп задание
